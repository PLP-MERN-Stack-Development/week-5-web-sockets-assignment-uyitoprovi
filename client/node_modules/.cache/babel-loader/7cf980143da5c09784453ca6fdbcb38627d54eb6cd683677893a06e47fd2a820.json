{"ast":null,"code":"var _s = $RefreshSig$();\nimport { io } from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nconst socket = io('http://localhost:5000', {\n  autoConnect: false\n});\nexport const useSocket = () => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [users, setUsers] = useState([]);\n  const connect = username => {\n    socket.connect();\n    socket.emit('user_join', username);\n  };\n  const disconnect = () => socket.disconnect();\n  const sendMessage = message => {\n    socket.emit('send_message', {\n      message\n    });\n  };\n  const setTyping = isTyping => {\n    socket.emit('typing', isTyping);\n  };\n  useEffect(() => {\n    socket.on('connect', () => setIsConnected(true));\n    socket.on('disconnect', () => setIsConnected(false));\n    socket.on('receive_message', message => {\n      setMessages(prev => [...prev, message]);\n    });\n    socket.on('user_joined', user => {\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        system: true,\n        message: `${user.username} joined`\n      }]);\n    });\n    socket.on('user_left', user => {\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        system: true,\n        message: `${user.username} left`\n      }]);\n    });\n    socket.on('user_list', userList => setUsers(userList));\n    socket.on('typing_users', typing => setTypingUsers(typing));\n    return () => socket.removeAllListeners();\n  }, []);\n  return {\n    socket,\n    isConnected,\n    messages,\n    typingUsers,\n    users,\n    connect,\n    disconnect,\n    sendMessage,\n    setTyping\n  };\n};\n_s(useSocket, \"opuCPqh+W98hgRdWNHWxj9qmofo=\");","map":{"version":3,"names":["io","useEffect","useState","socket","autoConnect","useSocket","_s","isConnected","setIsConnected","messages","setMessages","typingUsers","setTypingUsers","users","setUsers","connect","username","emit","disconnect","sendMessage","message","setTyping","isTyping","on","prev","user","id","Date","now","system","userList","typing","removeAllListeners"],"sources":["C:/Users/provi/OneDrive - K L University/Desktop/PLP MERN STACK/week-5-web-sockets-assignment-uyitoprovi/client/src/socket/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport { useEffect, useState } from 'react';\n\nconst socket = io('http://localhost:5000', {\n  autoConnect: false,\n});\n\nexport const useSocket = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  const connect = (username) => {\n    socket.connect();\n    socket.emit('user_join', username);\n  };\n\n  const disconnect = () => socket.disconnect();\n\n  const sendMessage = (message) => {\n    socket.emit('send_message', { message });\n  };\n\n  const setTyping = (isTyping) => {\n    socket.emit('typing', isTyping);\n  };\n\n  useEffect(() => {\n    socket.on('connect', () => setIsConnected(true));\n    socket.on('disconnect', () => setIsConnected(false));\n\n    socket.on('receive_message', (message) => {\n      setMessages((prev) => [...prev, message]);\n    });\n\n    socket.on('user_joined', (user) => {\n      setMessages((prev) => [...prev, {\n        id: Date.now(),\n        system: true,\n        message: `${user.username} joined`,\n      }]);\n    });\n\n    socket.on('user_left', (user) => {\n      setMessages((prev) => [...prev, {\n        id: Date.now(),\n        system: true,\n        message: `${user.username} left`,\n      }]);\n    });\n\n    socket.on('user_list', (userList) => setUsers(userList));\n    socket.on('typing_users', (typing) => setTypingUsers(typing));\n\n    return () => socket.removeAllListeners();\n  }, []);\n\n  return {\n    socket,\n    isConnected,\n    messages,\n    typingUsers,\n    users,\n    connect,\n    disconnect,\n    sendMessage,\n    setTyping,\n  };\n};\n"],"mappings":";AAAA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,EAAE;EACzCI,WAAW,EAAE;AACf,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,OAAO,GAAIC,QAAQ,IAAK;IAC5Bb,MAAM,CAACY,OAAO,CAAC,CAAC;IAChBZ,MAAM,CAACc,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC;EACpC,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAMf,MAAM,CAACe,UAAU,CAAC,CAAC;EAE5C,MAAMC,WAAW,GAAIC,OAAO,IAAK;IAC/BjB,MAAM,CAACc,IAAI,CAAC,cAAc,EAAE;MAAEG;IAAQ,CAAC,CAAC;EAC1C,CAAC;EAED,MAAMC,SAAS,GAAIC,QAAQ,IAAK;IAC9BnB,MAAM,CAACc,IAAI,CAAC,QAAQ,EAAEK,QAAQ,CAAC;EACjC,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdE,MAAM,CAACoB,EAAE,CAAC,SAAS,EAAE,MAAMf,cAAc,CAAC,IAAI,CAAC,CAAC;IAChDL,MAAM,CAACoB,EAAE,CAAC,YAAY,EAAE,MAAMf,cAAc,CAAC,KAAK,CAAC,CAAC;IAEpDL,MAAM,CAACoB,EAAE,CAAC,iBAAiB,EAAGH,OAAO,IAAK;MACxCV,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEJ,OAAO,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEFjB,MAAM,CAACoB,EAAE,CAAC,aAAa,EAAGE,IAAI,IAAK;MACjCf,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAC9BE,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdC,MAAM,EAAE,IAAI;QACZT,OAAO,EAAE,GAAGK,IAAI,CAACT,QAAQ;MAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEFb,MAAM,CAACoB,EAAE,CAAC,WAAW,EAAGE,IAAI,IAAK;MAC/Bf,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAC9BE,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdC,MAAM,EAAE,IAAI;QACZT,OAAO,EAAE,GAAGK,IAAI,CAACT,QAAQ;MAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEFb,MAAM,CAACoB,EAAE,CAAC,WAAW,EAAGO,QAAQ,IAAKhB,QAAQ,CAACgB,QAAQ,CAAC,CAAC;IACxD3B,MAAM,CAACoB,EAAE,CAAC,cAAc,EAAGQ,MAAM,IAAKnB,cAAc,CAACmB,MAAM,CAAC,CAAC;IAE7D,OAAO,MAAM5B,MAAM,CAAC6B,kBAAkB,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACL7B,MAAM;IACNI,WAAW;IACXE,QAAQ;IACRE,WAAW;IACXE,KAAK;IACLE,OAAO;IACPG,UAAU;IACVC,WAAW;IACXE;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CA9DWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}